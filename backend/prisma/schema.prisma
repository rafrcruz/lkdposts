generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AllowedRole {
  admin
  user
}

model HelloMessage {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AllowedUser {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  role      AllowedRole  @default(user)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  sessions  UserSession[]
}

model UserSession {
  id          String      @id @default(uuid())
  tokenHash   String      @unique
  userId      Int
  user        AllowedUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  expiresAt   DateTime
  revokedAt   DateTime?
  lastUsedAt  DateTime?
  userAgent   String?     @db.VarChar(255)
  ipAddress   String?     @db.VarChar(45)
}

model Feed {
  id           Int       @id @default(autoincrement())
  ownerKey     String    @db.VarChar(255)
  url          String    @db.Text
  title        String?   @db.Text
  lastFetchedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  articles     Article[]

  @@unique([ownerKey, url])
}

model Article {
  id             Int       @id @default(autoincrement())
  feedId         Int
  feed           Feed      @relation(fields: [feedId], references: [id], onDelete: Cascade)
  title          String    @db.Text
  contentSnippet String    @db.Text
  articleHtml    String?   @db.Text
  publishedAt    DateTime
  guid           String?   @db.Text
  link           String?   @db.Text
  dedupeKey      String    @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  post           Post?

  @@unique([feedId, guid])
  @@unique([feedId, link])
  @@unique([feedId, dedupeKey])
}

model Post {
  id        Int      @id @default(autoincrement())
  articleId Int      @unique
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
}

model AppParams {
  id                          Int      @id @default(1)
  postsRefreshCooldownSeconds Int      @map("posts_refresh_cooldown_seconds")
  postsTimeWindowDays         Int      @map("posts_time_window_days")
  updatedBy                   String?  @map("updated_by") @db.Text
  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")

  @@map("app_params")
}

